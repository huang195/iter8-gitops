apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: is-build-needed
  annotations:
    tekton.dev/displayName: "Test if building new image is needed"
spec:
  description: >-
    This task tests if building a new image is needed

  resources:
    inputs:
    - name: source
      type: git
      description: Holds git repo
  params:
  - name: CONTEXT
    description: Relative directory path to Dockerfile
  - name: COMMITS
    description: Number of commits to check
  - name: ACTION
    description: Action performed on the pull request
  - name: MERGED
    description: Whether or not pull request is merged
  - name: BRANCH
    description: The base branch of the pull request
  results:
  - name: needed
    description: If a new build is needed
  - name: promote
    description: If promotion should be done
  - name: cleanup
    description: If clean up of the new candidate should be done

  steps:
  - name: check
    workingDir: $(resources.inputs.source.path)
    image: alpine/git:latest
    script: |
      #!/usr/bin/env sh
      echo "action: $ACTION"
      echo "merged: $MERGED"
      echo "commits: $(params.COMMITS)"
      if [ $ACTION != 'closed' ] || [ $MERGED != 'true' ] || [ $BRANCH != 'main' ]
      then
        if [ $ACTION == 'promote' ]
        then
          echo "Promote the candidate version"
          printf yes > $(results.promote.path)
          printf no > $(results.cleanup.path)
          printf no > $(results.needed.path)
        elif [ $ACTION == 'cleanup' ]
        then
          echo "Clean up the candidate version"
          printf yes > $(results.cleanup.path)
          printf no > $(results.promote.path)
          printf no > $(results.needed.path)
        else
          echo "Not a merged PR"
          printf no > $(results.needed.path)
          printf no > $(results.promote.path)
          printf no > $(results.cleanup.path)
        fi
      else
        echo "commit `git rev-parse --short HEAD` is committed from a merged PR"
        if [ `git diff --name-only HEAD~$(params.COMMITS) | grep $(params.CONTEXT) | wc -l` -gt 0 ]
        then
          echo "Triggering a new build..."
          printf yes > $(results.needed.path)
        else
          echo "NOT triggering a new build..."
          printf no > $(results.needed.path)
        fi
        printf no > $(results.promote.path)
        printf no > $(results.cleanup.path)
      fi
    env:
    - name: ACTION
      value: $(params.ACTION)
    - name: MERGED
      value: $(params.MERGED)
    - name: BRANCH
      value: $(params.BRANCH)
